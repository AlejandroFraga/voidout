
#pragma once

#include "CoreMinimal.h"
#include "GameFramework/Actor.h"
#include "ACTR_Light.generated.h"

UCLASS()
class VOIDOUT_API AACTR_Light : public AActor
{

	GENERATED_BODY()

	// ---------------------------------------------------- Variables.

	bool m_isTower{ true };

	bool m_isColliding{ false };

	float m_timeInsideLight{ 0.1f };

	float m_timeDamageCounter{ 0.0f };

	class ACHRT_Player* m_player{ nullptr };

	class UACMP_LightRaycasting* m_playerRaycast{ nullptr };

	//Trigger sphere with the cone size radius.
	class USphereComponent* m_damageSphere{ nullptr };

	//Trigger sphere with the cone radius size by a multiplier assigned by blueprint.
	USphereComponent* m_secureZoneSphere{ nullptr };

	USphereComponent* m_lightZone{ nullptr };

	//light collision.
	class UBoxComponent* m_lightCollision{ nullptr };

	//spotLight component.
	class USpotLightComponent* m_light{ nullptr };

	// ---------------------------------------------------- Methods.

	UFUNCTION(BlueprintCallable)
	void lightComprobations(float damageMultiplicator, float deltaSeconds, float delayUntilDamage, float& damage);

	UFUNCTION(BlueprintCallable)
	void setUpLight();

	float getLightHeight() const;

	void PlayerOutside(float& damage);

protected:

	// ---------------------------------------------------- Methods.

	// Called when the game starts or when spawned
	virtual void BeginPlay() override;

	UFUNCTION()
	void OnOverlapBegin(UPrimitiveComponent* OverlappedComp, AActor* OtherActor, UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const FHitResult& SweepResult);

	UFUNCTION()
	void OnOverlapEnd(class UPrimitiveComponent* OverlappedComp, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex);

public:

	// ---------------------------------------------------- Variables.

	UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Zones")
	float m_multiplSecureZone{ 1.3f };

	UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Zones")
	float m_multiplExitZone{ 1.2f };

	UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Damage")
	float m_damageMultiplicator{ 10.0f };

	//This property especify the time until the damage hits the player.
	UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Damage")
	float m_delayUntilDamage{ 0.0f };

	UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Damage")
	float m_deltaSecondsReduction{ 1.0f };

	UPROPERTY(BlueprintReadWrite, Category = "Areas")
	bool m_isFallingTower{ false };

	// ---------------------------------------------------- Methods.

	//Behavior when lights are off
	void LightOffBehavior() const;

	//Behavior when lights are on
	void LightOnBehavior() const;

	virtual void setUpFarol(bool isFarol);

	//area radius generated by the tower lights, the player will be damaged if it is within this area.
	float getlightArea() const noexcept;

	//Secure zone radius
	float getSecureArea() const noexcept;

};
